import prisma from '@/app/lib/db';
import type { Product } from '@prisma/client';
import { notFound } from 'next/navigation';

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export function updateMetadata(product: Product) {
  metadata.title = product.name;
  metadata.description = product.name;
}

export default async function Page({
  params,
}: {
  params: { domain: string; slug: string };
}) {
  let product: Product | null = null;
  try {
    product = await fetchProductData(params.domain, params.slug);
  } catch (error) {
    console.log(error);
    if (error instanceof TypeError) notFound();
  }

  if (!product) {
    notFound();
  }

  updateMetadata(product);
  console.log(product);

  return (
    <div>
      <h1>{product.name}</h1>
      <h2>{params.domain}</h2>
      <p>{product.ProductScraper.url}</p>
      <h3>
        {product.ProductHistory[0].currencyType}
        {product.ProductHistory[0].price}
      </h3>
      <img src={product.ProductHistory[0].imageBase64} />
    </div>
  );
}

async function fetchProductData(
  domain: string | string[] | undefined,
  slug: string | string[] | undefined
): Promise<Product> {
  if (typeof slug === 'string' && typeof domain === 'string') {
    const product = await prisma.product.findFirst({
      include: {
        ProductHistory: {
          orderBy: {
            created: 'desc',
          },
          take: 25,
        },
        ProductScraper: {
          select: {
            url: true,
          },
        },
      },
      where: { slug: slug, Domain: { name: domain } },
    });

    if (!product) throw new TypeError('fetchProductData: product is null');
    return product;
  } else {
    throw new TypeError('fetchProductData: slug or domain is not a string');
  }
}
